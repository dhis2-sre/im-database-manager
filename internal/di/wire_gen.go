// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"log"

	"github.com/dhis2-sre/im-database-manager/internal/client"
	"github.com/dhis2-sre/im-database-manager/internal/handler"
	"github.com/dhis2-sre/im-database-manager/pkg/config"
	"github.com/dhis2-sre/im-database-manager/pkg/database"
	"github.com/dhis2-sre/im-database-manager/pkg/storage"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func GetEnvironment() Environment {
	configConfig := config.ProvideConfig()
	authenticationMiddleware := handler.ProvideAuthentication(configConfig)
	clientClient := client.ProvideUserService(configConfig)
	s3Client := storage.ProvideS3Client()
	client2 := client.ProvideJobService(configConfig)
	db := provideDatabase(configConfig)
	repository := database.ProvideRepository(db)
	service := database.ProvideService(configConfig, s3Client, client2, repository)
	databaseHandler := database.ProvideHandler(clientClient, service)
	environment := ProvideEnvironment(configConfig, authenticationMiddleware, databaseHandler)
	return environment
}

// wire.go:

type Environment struct {
	Config                   config.Config
	AuthenticationMiddleware handler.AuthenticationMiddleware
	DatabaseHandler          database.Handler
}

func ProvideEnvironment(config2 config.Config,

	authenticationMiddleware handler.AuthenticationMiddleware,
	databaseHandler database.Handler,
) Environment {
	return Environment{config2, authenticationMiddleware,
		databaseHandler,
	}
}

func provideDatabase(c config.Config) *gorm.DB {
	database2, err := storage.ProvideDatabase(c)
	if err != nil {
		log.Fatalln(err)
	}
	return database2
}
