// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ExternalDownloadDatabaseReader is a Reader for the ExternalDownloadDatabase structure.
type ExternalDownloadDatabaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExternalDownloadDatabaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExternalDownloadDatabaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExternalDownloadDatabaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExternalDownloadDatabaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExternalDownloadDatabaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewExternalDownloadDatabaseUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExternalDownloadDatabaseOK creates a ExternalDownloadDatabaseOK with default headers values
func NewExternalDownloadDatabaseOK() *ExternalDownloadDatabaseOK {
	return &ExternalDownloadDatabaseOK{}
}

/* ExternalDownloadDatabaseOK describes a response with status code 200, with default header values.

ExternalDownloadDatabaseOK external download database o k
*/
type ExternalDownloadDatabaseOK struct {
}

func (o *ExternalDownloadDatabaseOK) Error() string {
	return fmt.Sprintf("[GET /databases/external/{uuid}][%d] externalDownloadDatabaseOK ", 200)
}

func (o *ExternalDownloadDatabaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExternalDownloadDatabaseUnauthorized creates a ExternalDownloadDatabaseUnauthorized with default headers values
func NewExternalDownloadDatabaseUnauthorized() *ExternalDownloadDatabaseUnauthorized {
	return &ExternalDownloadDatabaseUnauthorized{}
}

/* ExternalDownloadDatabaseUnauthorized describes a response with status code 401, with default header values.

ExternalDownloadDatabaseUnauthorized external download database unauthorized
*/
type ExternalDownloadDatabaseUnauthorized struct {
}

func (o *ExternalDownloadDatabaseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /databases/external/{uuid}][%d] externalDownloadDatabaseUnauthorized ", 401)
}

func (o *ExternalDownloadDatabaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExternalDownloadDatabaseForbidden creates a ExternalDownloadDatabaseForbidden with default headers values
func NewExternalDownloadDatabaseForbidden() *ExternalDownloadDatabaseForbidden {
	return &ExternalDownloadDatabaseForbidden{}
}

/* ExternalDownloadDatabaseForbidden describes a response with status code 403, with default header values.

ExternalDownloadDatabaseForbidden external download database forbidden
*/
type ExternalDownloadDatabaseForbidden struct {
}

func (o *ExternalDownloadDatabaseForbidden) Error() string {
	return fmt.Sprintf("[GET /databases/external/{uuid}][%d] externalDownloadDatabaseForbidden ", 403)
}

func (o *ExternalDownloadDatabaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExternalDownloadDatabaseNotFound creates a ExternalDownloadDatabaseNotFound with default headers values
func NewExternalDownloadDatabaseNotFound() *ExternalDownloadDatabaseNotFound {
	return &ExternalDownloadDatabaseNotFound{}
}

/* ExternalDownloadDatabaseNotFound describes a response with status code 404, with default header values.

ExternalDownloadDatabaseNotFound external download database not found
*/
type ExternalDownloadDatabaseNotFound struct {
}

func (o *ExternalDownloadDatabaseNotFound) Error() string {
	return fmt.Sprintf("[GET /databases/external/{uuid}][%d] externalDownloadDatabaseNotFound ", 404)
}

func (o *ExternalDownloadDatabaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExternalDownloadDatabaseUnsupportedMediaType creates a ExternalDownloadDatabaseUnsupportedMediaType with default headers values
func NewExternalDownloadDatabaseUnsupportedMediaType() *ExternalDownloadDatabaseUnsupportedMediaType {
	return &ExternalDownloadDatabaseUnsupportedMediaType{}
}

/* ExternalDownloadDatabaseUnsupportedMediaType describes a response with status code 415, with default header values.

ExternalDownloadDatabaseUnsupportedMediaType external download database unsupported media type
*/
type ExternalDownloadDatabaseUnsupportedMediaType struct {
}

func (o *ExternalDownloadDatabaseUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /databases/external/{uuid}][%d] externalDownloadDatabaseUnsupportedMediaType ", 415)
}

func (o *ExternalDownloadDatabaseUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
