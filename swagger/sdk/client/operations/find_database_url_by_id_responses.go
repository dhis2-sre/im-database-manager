// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// FindDatabaseURLByIDReader is a Reader for the FindDatabaseURLByID structure.
type FindDatabaseURLByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindDatabaseURLByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindDatabaseURLByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindDatabaseURLByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFindDatabaseURLByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindDatabaseURLByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindDatabaseURLByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewFindDatabaseURLByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindDatabaseURLByIDOK creates a FindDatabaseURLByIDOK with default headers values
func NewFindDatabaseURLByIDOK() *FindDatabaseURLByIDOK {
	return &FindDatabaseURLByIDOK{}
}

/* FindDatabaseURLByIDOK describes a response with status code 200, with default header values.

FindDatabaseURLByIDOK find database Url by Id o k
*/
type FindDatabaseURLByIDOK struct {
}

func (o *FindDatabaseURLByIDOK) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdOK ", 200)
}

func (o *FindDatabaseURLByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseURLByIDBadRequest creates a FindDatabaseURLByIDBadRequest with default headers values
func NewFindDatabaseURLByIDBadRequest() *FindDatabaseURLByIDBadRequest {
	return &FindDatabaseURLByIDBadRequest{}
}

/* FindDatabaseURLByIDBadRequest describes a response with status code 400, with default header values.

FindDatabaseURLByIDBadRequest find database Url by Id bad request
*/
type FindDatabaseURLByIDBadRequest struct {
}

func (o *FindDatabaseURLByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdBadRequest ", 400)
}

func (o *FindDatabaseURLByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseURLByIDUnauthorized creates a FindDatabaseURLByIDUnauthorized with default headers values
func NewFindDatabaseURLByIDUnauthorized() *FindDatabaseURLByIDUnauthorized {
	return &FindDatabaseURLByIDUnauthorized{}
}

/* FindDatabaseURLByIDUnauthorized describes a response with status code 401, with default header values.

FindDatabaseURLByIDUnauthorized find database Url by Id unauthorized
*/
type FindDatabaseURLByIDUnauthorized struct {
}

func (o *FindDatabaseURLByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdUnauthorized ", 401)
}

func (o *FindDatabaseURLByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseURLByIDForbidden creates a FindDatabaseURLByIDForbidden with default headers values
func NewFindDatabaseURLByIDForbidden() *FindDatabaseURLByIDForbidden {
	return &FindDatabaseURLByIDForbidden{}
}

/* FindDatabaseURLByIDForbidden describes a response with status code 403, with default header values.

FindDatabaseURLByIDForbidden find database Url by Id forbidden
*/
type FindDatabaseURLByIDForbidden struct {
}

func (o *FindDatabaseURLByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdForbidden ", 403)
}

func (o *FindDatabaseURLByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseURLByIDNotFound creates a FindDatabaseURLByIDNotFound with default headers values
func NewFindDatabaseURLByIDNotFound() *FindDatabaseURLByIDNotFound {
	return &FindDatabaseURLByIDNotFound{}
}

/* FindDatabaseURLByIDNotFound describes a response with status code 404, with default header values.

FindDatabaseURLByIDNotFound find database Url by Id not found
*/
type FindDatabaseURLByIDNotFound struct {
}

func (o *FindDatabaseURLByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdNotFound ", 404)
}

func (o *FindDatabaseURLByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseURLByIDUnsupportedMediaType creates a FindDatabaseURLByIDUnsupportedMediaType with default headers values
func NewFindDatabaseURLByIDUnsupportedMediaType() *FindDatabaseURLByIDUnsupportedMediaType {
	return &FindDatabaseURLByIDUnsupportedMediaType{}
}

/* FindDatabaseURLByIDUnsupportedMediaType describes a response with status code 415, with default header values.

FindDatabaseURLByIDUnsupportedMediaType find database Url by Id unsupported media type
*/
type FindDatabaseURLByIDUnsupportedMediaType struct {
}

func (o *FindDatabaseURLByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /databases/{id}/url][%d] findDatabaseUrlByIdUnsupportedMediaType ", 415)
}

func (o *FindDatabaseURLByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
