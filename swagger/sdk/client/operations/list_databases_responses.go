// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-database-manager/swagger/sdk/models"
)

// ListDatabasesReader is a Reader for the ListDatabases structure.
type ListDatabasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDatabasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDatabasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListDatabasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListDatabasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListDatabasesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListDatabasesOK creates a ListDatabasesOK with default headers values
func NewListDatabasesOK() *ListDatabasesOK {
	return &ListDatabasesOK{}
}

/* ListDatabasesOK describes a response with status code 200, with default header values.

GroupsWithDatabases
*/
type ListDatabasesOK struct {
	Payload []*models.GroupsWithDatabases
}

func (o *ListDatabasesOK) Error() string {
	return fmt.Sprintf("[GET /databases][%d] listDatabasesOK  %+v", 200, o.Payload)
}
func (o *ListDatabasesOK) GetPayload() []*models.GroupsWithDatabases {
	return o.Payload
}

func (o *ListDatabasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDatabasesUnauthorized creates a ListDatabasesUnauthorized with default headers values
func NewListDatabasesUnauthorized() *ListDatabasesUnauthorized {
	return &ListDatabasesUnauthorized{}
}

/* ListDatabasesUnauthorized describes a response with status code 401, with default header values.

ListDatabasesUnauthorized list databases unauthorized
*/
type ListDatabasesUnauthorized struct {
}

func (o *ListDatabasesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /databases][%d] listDatabasesUnauthorized ", 401)
}

func (o *ListDatabasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDatabasesForbidden creates a ListDatabasesForbidden with default headers values
func NewListDatabasesForbidden() *ListDatabasesForbidden {
	return &ListDatabasesForbidden{}
}

/* ListDatabasesForbidden describes a response with status code 403, with default header values.

ListDatabasesForbidden list databases forbidden
*/
type ListDatabasesForbidden struct {
}

func (o *ListDatabasesForbidden) Error() string {
	return fmt.Sprintf("[GET /databases][%d] listDatabasesForbidden ", 403)
}

func (o *ListDatabasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDatabasesUnsupportedMediaType creates a ListDatabasesUnsupportedMediaType with default headers values
func NewListDatabasesUnsupportedMediaType() *ListDatabasesUnsupportedMediaType {
	return &ListDatabasesUnsupportedMediaType{}
}

/* ListDatabasesUnsupportedMediaType describes a response with status code 415, with default header values.

ListDatabasesUnsupportedMediaType list databases unsupported media type
*/
type ListDatabasesUnsupportedMediaType struct {
}

func (o *ListDatabasesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /databases][%d] listDatabasesUnsupportedMediaType ", 415)
}

func (o *ListDatabasesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
