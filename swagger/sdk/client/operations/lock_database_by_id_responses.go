// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-database-manager/swagger/sdk/models"
)

// LockDatabaseByIDReader is a Reader for the LockDatabaseByID structure.
type LockDatabaseByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LockDatabaseByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLockDatabaseByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLockDatabaseByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLockDatabaseByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLockDatabaseByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewLockDatabaseByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewLockDatabaseByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLockDatabaseByIDOK creates a LockDatabaseByIDOK with default headers values
func NewLockDatabaseByIDOK() *LockDatabaseByIDOK {
	return &LockDatabaseByIDOK{}
}

/* LockDatabaseByIDOK describes a response with status code 200, with default header values.

Lock
*/
type LockDatabaseByIDOK struct {
	Payload *models.Lock
}

func (o *LockDatabaseByIDOK) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdOK  %+v", 200, o.Payload)
}
func (o *LockDatabaseByIDOK) GetPayload() *models.Lock {
	return o.Payload
}

func (o *LockDatabaseByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Lock)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockDatabaseByIDUnauthorized creates a LockDatabaseByIDUnauthorized with default headers values
func NewLockDatabaseByIDUnauthorized() *LockDatabaseByIDUnauthorized {
	return &LockDatabaseByIDUnauthorized{}
}

/* LockDatabaseByIDUnauthorized describes a response with status code 401, with default header values.

LockDatabaseByIDUnauthorized lock database by Id unauthorized
*/
type LockDatabaseByIDUnauthorized struct {
}

func (o *LockDatabaseByIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdUnauthorized ", 401)
}

func (o *LockDatabaseByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockDatabaseByIDForbidden creates a LockDatabaseByIDForbidden with default headers values
func NewLockDatabaseByIDForbidden() *LockDatabaseByIDForbidden {
	return &LockDatabaseByIDForbidden{}
}

/* LockDatabaseByIDForbidden describes a response with status code 403, with default header values.

LockDatabaseByIDForbidden lock database by Id forbidden
*/
type LockDatabaseByIDForbidden struct {
}

func (o *LockDatabaseByIDForbidden) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdForbidden ", 403)
}

func (o *LockDatabaseByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockDatabaseByIDNotFound creates a LockDatabaseByIDNotFound with default headers values
func NewLockDatabaseByIDNotFound() *LockDatabaseByIDNotFound {
	return &LockDatabaseByIDNotFound{}
}

/* LockDatabaseByIDNotFound describes a response with status code 404, with default header values.

LockDatabaseByIDNotFound lock database by Id not found
*/
type LockDatabaseByIDNotFound struct {
}

func (o *LockDatabaseByIDNotFound) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdNotFound ", 404)
}

func (o *LockDatabaseByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockDatabaseByIDConflict creates a LockDatabaseByIDConflict with default headers values
func NewLockDatabaseByIDConflict() *LockDatabaseByIDConflict {
	return &LockDatabaseByIDConflict{}
}

/* LockDatabaseByIDConflict describes a response with status code 409, with default header values.

LockDatabaseByIDConflict lock database by Id conflict
*/
type LockDatabaseByIDConflict struct {
}

func (o *LockDatabaseByIDConflict) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdConflict ", 409)
}

func (o *LockDatabaseByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockDatabaseByIDUnsupportedMediaType creates a LockDatabaseByIDUnsupportedMediaType with default headers values
func NewLockDatabaseByIDUnsupportedMediaType() *LockDatabaseByIDUnsupportedMediaType {
	return &LockDatabaseByIDUnsupportedMediaType{}
}

/* LockDatabaseByIDUnsupportedMediaType describes a response with status code 415, with default header values.

LockDatabaseByIDUnsupportedMediaType lock database by Id unsupported media type
*/
type LockDatabaseByIDUnsupportedMediaType struct {
}

func (o *LockDatabaseByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /databases/{id}/lock][%d] lockDatabaseByIdUnsupportedMediaType ", 415)
}

func (o *LockDatabaseByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
