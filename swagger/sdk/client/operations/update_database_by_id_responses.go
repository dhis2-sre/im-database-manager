// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateDatabaseByIDReader is a Reader for the UpdateDatabaseByID structure.
type UpdateDatabaseByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDatabaseByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDatabaseByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateDatabaseByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDatabaseByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateDatabaseByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDatabaseByIDOK creates a UpdateDatabaseByIDOK with default headers values
func NewUpdateDatabaseByIDOK() *UpdateDatabaseByIDOK {
	return &UpdateDatabaseByIDOK{}
}

/* UpdateDatabaseByIDOK describes a response with status code 200, with default header values.

UpdateDatabaseByIDOK update database by Id o k
*/
type UpdateDatabaseByIDOK struct {
}

func (o *UpdateDatabaseByIDOK) Error() string {
	return fmt.Sprintf("[PUT /databases/{id}][%d] updateDatabaseByIdOK ", 200)
}

func (o *UpdateDatabaseByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDatabaseByIDUnauthorized creates a UpdateDatabaseByIDUnauthorized with default headers values
func NewUpdateDatabaseByIDUnauthorized() *UpdateDatabaseByIDUnauthorized {
	return &UpdateDatabaseByIDUnauthorized{}
}

/* UpdateDatabaseByIDUnauthorized describes a response with status code 401, with default header values.

UpdateDatabaseByIDUnauthorized update database by Id unauthorized
*/
type UpdateDatabaseByIDUnauthorized struct {
}

func (o *UpdateDatabaseByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /databases/{id}][%d] updateDatabaseByIdUnauthorized ", 401)
}

func (o *UpdateDatabaseByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDatabaseByIDForbidden creates a UpdateDatabaseByIDForbidden with default headers values
func NewUpdateDatabaseByIDForbidden() *UpdateDatabaseByIDForbidden {
	return &UpdateDatabaseByIDForbidden{}
}

/* UpdateDatabaseByIDForbidden describes a response with status code 403, with default header values.

UpdateDatabaseByIDForbidden update database by Id forbidden
*/
type UpdateDatabaseByIDForbidden struct {
}

func (o *UpdateDatabaseByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /databases/{id}][%d] updateDatabaseByIdForbidden ", 403)
}

func (o *UpdateDatabaseByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDatabaseByIDUnsupportedMediaType creates a UpdateDatabaseByIDUnsupportedMediaType with default headers values
func NewUpdateDatabaseByIDUnsupportedMediaType() *UpdateDatabaseByIDUnsupportedMediaType {
	return &UpdateDatabaseByIDUnsupportedMediaType{}
}

/* UpdateDatabaseByIDUnsupportedMediaType describes a response with status code 415, with default header values.

UpdateDatabaseByIDUnsupportedMediaType update database by Id unsupported media type
*/
type UpdateDatabaseByIDUnsupportedMediaType struct {
}

func (o *UpdateDatabaseByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /databases/{id}][%d] updateDatabaseByIdUnsupportedMediaType ", 415)
}

func (o *UpdateDatabaseByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
